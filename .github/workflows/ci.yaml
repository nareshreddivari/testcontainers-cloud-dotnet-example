name: CI

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency: 
      group: build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.x'

      - name: Restore .NET Tools
        run: dotnet tool restore || echo "No tools to restore."

      # Authenticate with Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PAT }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Ensure No Concurrent Workflows Before Running Testcontainers Cloud
      - name: Ensure No Other Running Workflows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUNNING_WORKFLOWS=$(gh run list --repo $GITHUB_REPOSITORY --status in_progress | grep "CI" | wc -l)
          if [[ "$RUNNING_WORKFLOWS" -gt 1 ]]; then
            echo "Another CI workflow is running. Exiting to prevent Testcontainers Cloud conflicts."
            exit 1
          fi

      # Setup Testcontainers Cloud
      - name: Setup Testcontainers Cloud Client
        uses: atomicjar/testcontainers-cloud-setup-action@main
        with:
          token: ${{ secrets.TC_CLOUD_TOKEN }}

      # Ensure Testcontainers Cloud Agent is Running
      - name: Ensure Testcontainers Cloud Agent is Running
        run: |
          if ! pgrep -f testcontainers-cloud-agent > /dev/null; then
            echo "Testcontainers Cloud Agent is NOT running. Restarting..."
            nohup testcontainers-cloud-agent > /dev/null 2>&1 &
            sleep 15  # Give it time to fully initialize
          fi

      # Verify and Recreate 'tcc' Context if Missing
      - name: Verify & Recreate 'tcc' Docker Context
        run: |
          echo "Checking available Docker contexts..."
          docker context ls || true  # Don't fail if command errors

          # If 'tcc' context is missing, restart the agent to recreate it
          if ! docker context ls | grep -q "tcc"; then
            echo "'tcc' context missing! Restarting Testcontainers Cloud agent..."
            testcontainers-cloud-agent restart
            sleep 20  # Allow more time for Testcontainers Cloud to be ready
          fi

          # Ensure 'tcc' is the active context
          echo "Switching to 'tcc' context..."
          for i in {1..5}; do
            docker context use tcc && break || sleep 5
          done

      # Final Docker Info Check with Rate-Limiting
      - name: Verify Docker Context
        run: |
          for i in {1..5}; do
            docker info && break || (echo "Docker info retrying in 5s..." && sleep 5)
          done

      # Run tests
      - name: Run Tests with Testcontainers Cloud
        run: |
          docker context use tcc
          make test
